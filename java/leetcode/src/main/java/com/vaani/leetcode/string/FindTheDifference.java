package com.vaani.leetcode.string;

import java.util.HashMap;

/**
 * https://leetcode.com/problems/find-the-difference/
 * 389. Find the Difference
 * <p>
 * Given two strings s and t which consist of only lowercase letters.
 * <p>
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * <p>
 * Find the letter that was added in t.
 * <p>
 * Example:
 * <p>
 * Input:
 * s = "abcd"
 * t = "abcde"
 * <p>
 * Output:
 * e
 * <p>
 * Explanation:
 * 'e' is the letter that was added.
 * <p>
 * Companies: Google, Adobe
 * <p>
 * Related Topics: Hash Table, Bit Manipulation
 * <p>
 * Similar Questions: (E) Single Number
 */
public class FindTheDifference {

    // best
    static class O1SpaceXor {
        // fast
        public char findTheDifference(String s, String t) {
            int n = t.length();
            char c = t.charAt(n - 1);
            for (int i = 0; i < n - 1; ++i) {
                c ^= s.charAt(i);
                c ^= t.charAt(i);
            }
            return c;
        }

        // slow
        public char findTheDifference2(String s, String t) {
            int sXor = s.chars().reduce((a, b) -> a ^ b).orElse(0);
            int tXor = t.chars().reduce((a, b) -> a ^ b).orElse(0);
            int diff = sXor ^ tXor;
            return (char) diff;
        }
    }

    static class O1SpaceDiff {
        public char findTheDifference(String s, String t) {
            int charCode = t.charAt(s.length());
            // Iterate through both strings and char codes
            for (int i = 0; i < s.length(); ++i) {
                charCode -= (int) s.charAt(i);
                charCode += (int) t.charAt(i);
            }
            return (char) charCode;
        }

        public char findTheDifference2(String s, String t) {
            int sumOfS = s.chars().reduce((a, b) -> a + b).orElse(0);
            int sumOfT = t.chars().reduce((a, b) -> a + b).orElse(0);
            char diff = (char) (sumOfT - sumOfS);
            return diff;
        }

        public char findTheDifference3(String s, String t) {
            int sumOfS = s.chars().sum();
            int sumOfT = t.chars().sum();
            char diff = (char) (sumOfT - sumOfS);
            return diff;
        }
    }

    static class OnSpaceDiff {
        public char findTheDifference(String s, String t) {
            if (s.isEmpty() && t != null) {
                return t.charAt(0);
            }
            HashMap<Character, Integer> map = new HashMap<>();
            for (char a : s.toCharArray()) {
                map.put(a, map.getOrDefault(a, 0) + 1);
            }
            for (char a : t.toCharArray()) {
                if (!map.containsKey(a))
                    return a;
                else {
                    if (map.get(a) == 0)
                        return a;
                    map.put(a, map.getOrDefault(a, 0) - 1);
                }
            }
            return t.charAt(t.length() - 1);
        }
    }


    static class OnSpaceUsingHashArray {
        public char findTheDifference(String s, String t) {
            int[] hash = new int[26];
            char[] sarray = s.toCharArray();
            char[] tarray = t.toCharArray();
            for (int i = 0; i < s.length(); i++) {
                int num = sarray[i] - 'a';
                hash[num]++;
            }
            for (int i = 0; i < t.length(); i++) {
                int tnum = tarray[i] - 'a';
                hash[tnum]--;
                if (hash[tnum] < 0) {
                    return (char) ((char) tnum + 'a');
                }
            }
            return '-';
        }
    }


}